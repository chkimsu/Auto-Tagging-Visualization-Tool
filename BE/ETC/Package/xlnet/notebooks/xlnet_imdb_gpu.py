# -*- coding: utf-8 -*-
"""XLNet-imdb-GPU.ipynb의 사본

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XY7QbGIaPQaN1w5fouZzYeiQUD5fLGv8

# XLNet IMDB movie review classification project

This notebook is for classifying the [imdb sentiment dataset](https://ai.stanford.edu/~amaas/data/sentiment/).  It will be easy to edit this notebook in order to run all of the classification tasks referenced in the [XLNet paper](https://arxiv.org/abs/1906.08237). Whilst you cannot expect to obtain the state-of-the-art results in the paper on a GPU, this model will still score very highly.

## Setup
Install dependencies
"""

# pip install sentencepiece

"""Download the pretrained XLNet model and unzip"""

# only needs to be done once
# ! wget https://storage.googleapis.com/xlnet/released_models/cased_L-24_H-1024_A-16.zip
# ! unzip cased_L-24_H-1024_A-16.zip

"""Download extract the imdb dataset - surpessing output"""

# ! wget http://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz
# ! tar zxf aclImdb_v1.tar.gz

"""Git clone XLNet repo for access to run_classifier and the rest of the xlnet module"""

# ! git clone https://github.com/zihangdai/xlnet.git

"""## Define Variables
Define all the dirs: data, xlnet scripts & pretrained model. 
If you would like to save models then you can authenticate a GCP account and use that for the OUTPUT_DIR & CHECKPOINT_DIR - you will need a large amount storage to fix these models. 

Alternatively it is easy to integrate a google drive account, checkout this guide for [I/O in colab](https://colab.research.google.com/notebooks/io.ipynb) but rememeber these will take up a large amount of storage.
"""

SCRIPTS_DIR = 'xlnet' #@param {type:"string"}
DATA_DIR = 'aclImdb' #@param {type:"string"}
OUTPUT_DIR = 'proc_data/imdb' #@param {type:"string"}
PRETRAINED_MODEL_DIR = 'xlnet_cased_L-24_H-1024_A-16' #@param {type:"string"}
CHECKPOINT_DIR = 'exp/imdb' #@param {type:"string"}

"""## Run Model
This will set off the fine tuning of XLNet. There are a few things to note here:



python xlnet/run_classifier.py --do_train=True --do_eval=True --eval_all_ckpt=True --task_name=imdb --data_dir='aclImdb' --output_dir='proc_data/imdb' --model_dir='exp/imdb' --uncased=False --spiece_model_file='xlnet_cased_L-24_H-1024_A-16/spiece.model' --model_config_path='xlnet_cased_L-24_H-1024_A-16/xlnet_config.json' --init_checkpoint='xlnet_cased_L-24_H-1024_A-16/xlnet_model.ckpt' --max_seq_length=128 --train_batch_size=8 --eval_batch_size=8 --num_hosts=1 --num_core_per_host=1 --learning_rate=2e-5 --train_steps=40 --warmup_steps=5 --save_steps=5 --iterations=5


1.   This script will train and evaluate the model
2.   This will store the results locally on colab and will be lost when you are disconnected from the runtime
3.   This uses the large version of the model (base not released presently)
4.   We are using a max seq length of 128 with a batch size of 8 please refer to the [README](https://github.com/zihangdai/xlnet#memory-issue-during-finetuning) for why this is.
5. This will take approx 4hrs to run on GPU.
"""

train_command = "python xlnet/run_classifier.py \
  --do_train=True \
  --do_eval=True \
  --eval_all_ckpt=True \
  --task_name=imdb \
  --data_dir="+DATA_DIR+" \
  --output_dir="+OUTPUT_DIR+" \
  --model_dir="+CHECKPOINT_DIR+" \
  --uncased=False \
  --spiece_model_file="+PRETRAINED_MODEL_DIR+"/spiece.model \
  --model_config_path="+PRETRAINED_MODEL_DIR+"/xlnet_config.json \
  --init_checkpoint="+PRETRAINED_MODEL_DIR+"/xlnet_model.ckpt \
  --max_seq_length=128 \
  --train_batch_size=8 \
  --eval_batch_size=8 \
  --num_hosts=1 \
  --num_core_per_host=1 \
  --learning_rate=2e-5 \
  --train_steps=4000 \
  --warmup_steps=500 \
  --save_steps=500 \
  --iterations=500"

! {train_command}

"""## Running & Results
These are the results that I got from running this experiment
### Params
*    --max_seq_length=128 \
*    --train_batch_size= 8 

### Times
*   Training: 1hr 11mins
*   Evaluation: 2.5hr

### Results
*  Most accurate model on final step
*  Accuracy: 0.92416, eval_loss: 0.31708

### Model

*   The trained model checkpoints can be found in 'exp/imdb'
"""